
/private/var/folders/h4/p43fxmd10sbfc00l8ym2fjc80000gn/T/arduino/sketches/0DD5C01F99ACC1C5982347DB76CFD01A/Week2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	d7 c0       	rjmp	.+430    	; 0x1b0 <__ctors_end>
       2:	00 00       	nop
       4:	fa c0       	rjmp	.+500    	; 0x1fa <__bad_interrupt>
       6:	00 00       	nop
       8:	f8 c0       	rjmp	.+496    	; 0x1fa <__bad_interrupt>
       a:	00 00       	nop
       c:	f6 c0       	rjmp	.+492    	; 0x1fa <__bad_interrupt>
       e:	00 00       	nop
      10:	f4 c0       	rjmp	.+488    	; 0x1fa <__bad_interrupt>
      12:	00 00       	nop
      14:	f2 c0       	rjmp	.+484    	; 0x1fa <__bad_interrupt>
      16:	00 00       	nop
      18:	f0 c0       	rjmp	.+480    	; 0x1fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ee c0       	rjmp	.+476    	; 0x1fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	ec c0       	rjmp	.+472    	; 0x1fa <__bad_interrupt>
      22:	00 00       	nop
      24:	ea c0       	rjmp	.+468    	; 0x1fa <__bad_interrupt>
      26:	00 00       	nop
      28:	82 c4       	rjmp	.+2308   	; 0x92e <__vector_10>
      2a:	00 00       	nop
      2c:	f9 c4       	rjmp	.+2546   	; 0xa20 <__vector_11>
      2e:	00 00       	nop
      30:	e4 c0       	rjmp	.+456    	; 0x1fa <__bad_interrupt>
      32:	00 00       	nop
      34:	e2 c0       	rjmp	.+452    	; 0x1fa <__bad_interrupt>
      36:	00 00       	nop
      38:	e0 c0       	rjmp	.+448    	; 0x1fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	de c0       	rjmp	.+444    	; 0x1fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	dc c0       	rjmp	.+440    	; 0x1fa <__bad_interrupt>
      42:	00 00       	nop
      44:	da c0       	rjmp	.+436    	; 0x1fa <__bad_interrupt>
      46:	00 00       	nop
      48:	d8 c0       	rjmp	.+432    	; 0x1fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d6 c0       	rjmp	.+428    	; 0x1fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	d4 c0       	rjmp	.+424    	; 0x1fa <__bad_interrupt>
      52:	00 00       	nop
      54:	d2 c0       	rjmp	.+420    	; 0x1fa <__bad_interrupt>
      56:	00 00       	nop
      58:	d0 c0       	rjmp	.+416    	; 0x1fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c7 c3       	rjmp	.+1934   	; 0x7ec <__vector_23>
      5e:	00 00       	nop
      60:	cc c0       	rjmp	.+408    	; 0x1fa <__bad_interrupt>
      62:	00 00       	nop
      64:	de c1       	rjmp	.+956    	; 0x422 <__vector_25>
      66:	00 00       	nop
      68:	03 c2       	rjmp	.+1030   	; 0x470 <__vector_26>
      6a:	00 00       	nop
      6c:	2e c2       	rjmp	.+1116   	; 0x4ca <__vector_27>
      6e:	00 00       	nop
      70:	c4 c0       	rjmp	.+392    	; 0x1fa <__bad_interrupt>
      72:	00 00       	nop
      74:	c2 c0       	rjmp	.+388    	; 0x1fa <__bad_interrupt>
      76:	00 00       	nop
      78:	c0 c0       	rjmp	.+384    	; 0x1fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	be c0       	rjmp	.+380    	; 0x1fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	bc c0       	rjmp	.+376    	; 0x1fa <__bad_interrupt>
      82:	00 00       	nop
      84:	ba c0       	rjmp	.+372    	; 0x1fa <__bad_interrupt>
      86:	00 00       	nop
      88:	b8 c0       	rjmp	.+368    	; 0x1fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b6 c0       	rjmp	.+364    	; 0x1fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	b4 c0       	rjmp	.+360    	; 0x1fa <__bad_interrupt>
      92:	00 00       	nop
      94:	b2 c0       	rjmp	.+356    	; 0x1fa <__bad_interrupt>
      96:	00 00       	nop
      98:	b0 c0       	rjmp	.+352    	; 0x1fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ae c0       	rjmp	.+348    	; 0x1fa <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ac c0       	rjmp	.+344    	; 0x1fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	aa c0       	rjmp	.+340    	; 0x1fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	a8 c0       	rjmp	.+336    	; 0x1fa <__bad_interrupt>
	...

000000ac <__trampolines_end>:
      ac:	01 23       	and	r16, r17
      ae:	02 23       	and	r16, r18
      b0:	04 23       	and	r16, r20
      b2:	08 23       	and	r16, r24
      b4:	80 23       	and	r24, r16
      b6:	01 29       	or	r16, r1
      b8:	02 29       	or	r16, r2
      ba:	04 29       	or	r16, r4
      bc:	08 29       	or	r16, r8
      be:	40 26       	eor	r4, r16
      c0:	80 26       	eor	r8, r16
      c2:	40 29       	or	r20, r0
      c4:	80 29       	or	r24, r0
      c6:	10 23       	and	r17, r16
      c8:	20 23       	and	r18, r16
      ca:	40 23       	and	r20, r16
      cc:	80 2f       	mov	r24, r16
      ce:	40 2f       	mov	r20, r16
      d0:	20 2f       	mov	r18, r16
      d2:	10 2f       	mov	r17, r16
      d4:	02 2f       	mov	r16, r18
      d6:	01 2f       	mov	r16, r17
      d8:	10 29       	or	r17, r0
      da:	20 29       	or	r18, r0
      dc:	40 2c       	mov	r4, r0

000000de <descriptor_list>:
      de:	00 01 00 00 8f 01 12 00 02 00 00 4c 01 43 00 03     ...........L.C..
      ee:	00 00 48 01 04 01 03 09 04 2e 01 18 02 03 09 04     ..H.............
      fe:	16 01 16 03 03 09 04 08 01 0c                       ..........

00000108 <string3>:
     108:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

00000116 <string2>:
     116:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     126:	69 00 61 00 6c 00 00 00                             i.a.l...

0000012e <string1>:
     12e:	18 03 54 00 65 00 65 00 6e 00 73 00 79 00 64 00     ..T.e.e.n.s.y.d.
     13e:	75 00 69 00 6e 00 6f 00 00 00                       u.i.n.o...

00000148 <string0>:
     148:	04 03 09 04                                         ....

0000014c <config1_descriptor>:
     14c:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     15c:	01 00 05 24 00 10 01 05 24 01 00 01 04 24 02 06     ...$....$....$..
     16c:	05 24 06 00 01 07 05 82 03 08 00 40 09 04 01 00     .$.........@....
     17c:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     18c:	40 00 00                                            @..

0000018f <device_descriptor>:
     18f:	12 01 00 02 02 00 00 20 c0 16 83 04 71 02 01 02     ....... ....q...
     19f:	03 01                                               ..

000001a1 <endpoint_config_table>:
     1a1:	00 01 c1 02 01 80 36 01 81 36 00                    ......6..6.

000001ac <__ctors_start>:
     1ac:	7f 02       	muls	r23, r31
     1ae:	72 08       	sbc	r7, r2

000001b0 <__ctors_end>:
     1b0:	11 24       	eor	r1, r1
     1b2:	1f be       	out	0x3f, r1	; 63
     1b4:	cf ef       	ldi	r28, 0xFF	; 255
     1b6:	da e0       	ldi	r29, 0x0A	; 10
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	cd bf       	out	0x3d, r28	; 61

000001bc <__do_copy_data>:
     1bc:	11 e0       	ldi	r17, 0x01	; 1
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	ea e1       	ldi	r30, 0x1A	; 26
     1c4:	f1 e1       	ldi	r31, 0x11	; 17
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <__do_copy_data+0x10>
     1c8:	05 90       	lpm	r0, Z+
     1ca:	0d 92       	st	X+, r0
     1cc:	a0 34       	cpi	r26, 0x40	; 64
     1ce:	b1 07       	cpc	r27, r17
     1d0:	d9 f7       	brne	.-10     	; 0x1c8 <__do_copy_data+0xc>

000001d2 <__do_clear_bss>:
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	a0 e4       	ldi	r26, 0x40	; 64
     1d6:	b1 e0       	ldi	r27, 0x01	; 1
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <.do_clear_bss_start>

000001da <.do_clear_bss_loop>:
     1da:	1d 92       	st	X+, r1

000001dc <.do_clear_bss_start>:
     1dc:	ab 3c       	cpi	r26, 0xCB	; 203
     1de:	b2 07       	cpc	r27, r18
     1e0:	e1 f7       	brne	.-8      	; 0x1da <.do_clear_bss_loop>

000001e2 <__do_global_ctors>:
     1e2:	10 e0       	ldi	r17, 0x00	; 0
     1e4:	c8 ed       	ldi	r28, 0xD8	; 216
     1e6:	d0 e0       	ldi	r29, 0x00	; 0
     1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <__do_global_ctors+0xe>
     1ea:	21 97       	sbiw	r28, 0x01	; 1
     1ec:	fe 01       	movw	r30, r28
     1ee:	8d d7       	rcall	.+3866   	; 0x110a <__tablejump2__>
     1f0:	c6 3d       	cpi	r28, 0xD6	; 214
     1f2:	d1 07       	cpc	r29, r17
     1f4:	d1 f7       	brne	.-12     	; 0x1ea <__do_global_ctors+0x8>
     1f6:	d6 d1       	rcall	.+940    	; 0x5a4 <main>
     1f8:	8e c7       	rjmp	.+3868   	; 0x1116 <_exit>

000001fa <__bad_interrupt>:
     1fa:	02 cf       	rjmp	.-508    	; 0x0 <__vectors>

000001fc <setup>:
			} else if (pin == 7) {
				CORE_PIN7_DDRREG |= CORE_PIN7_BITMASK;
			} else if (pin == 8) {
				CORE_PIN8_DDRREG |= CORE_PIN8_BITMASK;
			} else if (pin == 9) {
				CORE_PIN9_DDRREG |= CORE_PIN9_BITMASK;
     1fc:	3e 9a       	sbi	0x07, 6	; 7
			} else if (pin == 7) {
				CORE_PIN7_PORTREG |= CORE_PIN7_BITMASK;
			} else if (pin == 8) {
				CORE_PIN8_PORTREG |= CORE_PIN8_BITMASK;
			} else if (pin == 9) {
				CORE_PIN9_PORTREG |= CORE_PIN9_BITMASK;
     1fe:	46 9a       	sbi	0x08, 6	; 8
		} else if (pin == CORE_OC1C_PIN) {
			TCCR1A &= ~(1<<COM1C1);
		}
		#if defined(__AVR_ATmega32U4__)
		  else if (pin == CORE_OC3A_PIN) {
			TCCR3A &= ~(1<<COM3A1);
     200:	e0 e9       	ldi	r30, 0x90	; 144
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	8f 77       	andi	r24, 0x7F	; 127
     208:	80 83       	st	Z, r24
  pinMode(keyPin, OUTPUT);    // this pin will pull the HC-05 
                         // pin 34 (KEY pin) HIGH to switch
                         //  module to AT mode

  digitalWrite(keyPin, HIGH); 
  Serial.begin(9600);
     20a:	40 e8       	ldi	r20, 0x80	; 128
     20c:	55 e2       	ldi	r21, 0x25	; 37
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	81 ec       	ldi	r24, 0xC1	; 193
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	00 d7       	rcall	.+3584   	; 0x1018 <usb_serial_class::begin(long)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     218:	42 e1       	ldi	r20, 0x12	; 18
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	68 e0       	ldi	r22, 0x08	; 8
     21e:	71 e0       	ldi	r23, 0x01	; 1
     220:	81 ec       	ldi	r24, 0xC1	; 193
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	f9 d5       	rcall	.+3058   	; 0xe18 <usb_serial_class::write(unsigned char const*, unsigned int)>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     226:	81 ec       	ldi	r24, 0xC1	; 193
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	a2 d1       	rcall	.+836    	; 0x570 <Print::println()>

class HardwareSerial : public Stream
{
public:
	inline void begin(uint32_t baud, uint8_t txen_pin=255) {
		_begin(((F_CPU / 8) + (baud / 2)) / baud, txen_pin);
     22c:	4f ef       	ldi	r20, 0xFF	; 255
     22e:	64 e3       	ldi	r22, 0x34	; 52
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	80 e4       	ldi	r24, 0x40	; 64
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	bc c0       	rjmp	.+376    	; 0x3b0 <HardwareSerial::_begin(unsigned int, unsigned char)>

00000238 <loop>:
  Serial1.begin(38400);  // HC-05 default speed in AT 
                          // command mode
}

void loop()
{
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	1f 92       	push	r1
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
  // Keep reading from HC-05 and send to Arduino 
  // Serial Monitor
  if (Serial1.available())
     242:	80 e4       	ldi	r24, 0x40	; 64
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	1e d0       	rcall	.+60     	; 0x284 <HardwareSerial::available()>
     248:	89 2b       	or	r24, r25
     24a:	61 f0       	breq	.+24     	; 0x264 <loop+0x2c>
    Serial.write(Serial1.read());
     24c:	80 e4       	ldi	r24, 0x40	; 64
     24e:	91 e0       	ldi	r25, 0x01	; 1
     250:	4c d0       	rcall	.+152    	; 0x2ea <HardwareSerial::read()>
     252:	89 83       	std	Y+1, r24	; 0x01
	virtual int available();
	virtual int read();
	virtual int peek();
	virtual void flush();
#if ARDUINO >= 100
	virtual size_t write(uint8_t c)		{ return write(&c, 1); }
     254:	41 e0       	ldi	r20, 0x01	; 1
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	be 01       	movw	r22, r28
     25a:	6f 5f       	subi	r22, 0xFF	; 255
     25c:	7f 4f       	sbci	r23, 0xFF	; 255
     25e:	81 ec       	ldi	r24, 0xC1	; 193
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	da d5       	rcall	.+2996   	; 0xe18 <usb_serial_class::write(unsigned char const*, unsigned int)>

  // Keep reading from Arduino Serial Monitor 
  //  and send to HC-05
  if (Serial.available())
     264:	81 ec       	ldi	r24, 0xC1	; 193
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	5c d5       	rcall	.+2744   	; 0xd22 <usb_serial_class::available()>
     26a:	89 2b       	or	r24, r25
     26c:	39 f0       	breq	.+14     	; 0x27c <loop+0x44>
    Serial1.write(Serial.read());
     26e:	81 ec       	ldi	r24, 0xC1	; 193
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	90 d5       	rcall	.+2848   	; 0xd94 <usb_serial_class::read()>
     274:	68 2f       	mov	r22, r24
     276:	80 e4       	ldi	r24, 0x40	; 64
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	54 d0       	rcall	.+168    	; 0x324 <HardwareSerial::write(unsigned char)>
     27c:	0f 90       	pop	r0
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <HardwareSerial::available()>:
     284:	50 91 74 01 	lds	r21, 0x0174	; 0x800174 <rx_buffer_head>
}

void HardwareSerial::clear()
{
	rx_buffer_head = rx_buffer_tail;
}
     288:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <rx_buffer_tail>
     28c:	85 2f       	mov	r24, r21
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	24 2f       	mov	r18, r20
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	54 17       	cp	r21, r20
     296:	18 f0       	brcs	.+6      	; 0x29e <HardwareSerial::available()+0x1a>
     298:	82 1b       	sub	r24, r18
     29a:	93 0b       	sbc	r25, r19
     29c:	08 95       	ret
     29e:	80 5c       	subi	r24, 0xC0	; 192
     2a0:	9f 4f       	sbci	r25, 0xFF	; 255
     2a2:	fa cf       	rjmp	.-12     	; 0x298 <HardwareSerial::available()+0x14>

000002a4 <HardwareSerial::availableForWrite()>:
     2a4:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <tx_buffer_head>
     2a8:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <tx_buffer_tail>
     2ac:	25 2f       	mov	r18, r21
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	84 2f       	mov	r24, r20
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	82 1b       	sub	r24, r18
     2b6:	93 0b       	sbc	r25, r19
     2b8:	54 17       	cp	r21, r20
     2ba:	10 f0       	brcs	.+4      	; 0x2c0 <HardwareSerial::availableForWrite()+0x1c>
     2bc:	87 96       	adiw	r24, 0x27	; 39
     2be:	08 95       	ret
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	08 95       	ret

000002c4 <HardwareSerial::peek()>:
     2c4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rx_buffer_head>
     2c8:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <rx_buffer_tail>
     2cc:	8e 17       	cp	r24, r30
     2ce:	51 f0       	breq	.+20     	; 0x2e4 <HardwareSerial::peek()+0x20>
     2d0:	ef 5f       	subi	r30, 0xFF	; 255
     2d2:	e0 34       	cpi	r30, 0x40	; 64
     2d4:	08 f0       	brcs	.+2      	; 0x2d8 <HardwareSerial::peek()+0x14>
     2d6:	e0 e0       	ldi	r30, 0x00	; 0
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	eb 58       	subi	r30, 0x8B	; 139
     2dc:	fe 4f       	sbci	r31, 0xFE	; 254
     2de:	80 81       	ld	r24, Z
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	08 95       	ret
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	9f ef       	ldi	r25, 0xFF	; 255
     2e8:	08 95       	ret

000002ea <HardwareSerial::read()>:
     2ea:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <rx_buffer_head>
     2ee:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <rx_buffer_tail>
     2f2:	98 17       	cp	r25, r24
     2f4:	79 f0       	breq	.+30     	; 0x314 <HardwareSerial::read()+0x2a>
     2f6:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <rx_buffer_tail>
     2fa:	9f 5f       	subi	r25, 0xFF	; 255
     2fc:	90 34       	cpi	r25, 0x40	; 64
     2fe:	08 f0       	brcs	.+2      	; 0x302 <HardwareSerial::read()+0x18>
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	e9 2f       	mov	r30, r25
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	eb 58       	subi	r30, 0x8B	; 139
     308:	fe 4f       	sbci	r31, 0xFE	; 254
     30a:	80 81       	ld	r24, Z
     30c:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <rx_buffer_tail>
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	08 95       	ret
     314:	8f ef       	ldi	r24, 0xFF	; 255
     316:	9f ef       	ldi	r25, 0xFF	; 255
     318:	08 95       	ret

0000031a <HardwareSerial::flush()>:
     31a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <transmitting>
     31e:	81 11       	cpse	r24, r1
     320:	fc cf       	rjmp	.-8      	; 0x31a <HardwareSerial::flush()>
     322:	08 95       	ret

00000324 <HardwareSerial::write(unsigned char)>:
     324:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
     328:	23 fd       	sbrc	r18, 3
     32a:	06 c0       	rjmp	.+12     	; 0x338 <HardwareSerial::write(unsigned char)+0x14>
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	fc 01       	movw	r30, r24
     330:	22 83       	std	Z+2, r18	; 0x02
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	08 95       	ret
     338:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     33c:	8f 3f       	cpi	r24, 0xFF	; 255
     33e:	41 f0       	breq	.+16     	; 0x350 <HardwareSerial::write(unsigned char)+0x2c>
     340:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <transmitting>
     344:	81 11       	cpse	r24, r1
     346:	04 c0       	rjmp	.+8      	; 0x350 <HardwareSerial::write(unsigned char)+0x2c>
     348:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	8f d1       	rcall	.+798    	; 0x66e <_digitalWrite_HIGH>
     350:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tx_buffer_head>
     354:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tx_buffer_tail>
     358:	98 13       	cpse	r25, r24
     35a:	04 c0       	rjmp	.+8      	; 0x364 <HardwareSerial::write(unsigned char)+0x40>
     35c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
     360:	85 fd       	sbrc	r24, 5
     362:	19 c0       	rjmp	.+50     	; 0x396 <HardwareSerial::write(unsigned char)+0x72>
     364:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <tx_buffer_head>
     368:	8f 5f       	subi	r24, 0xFF	; 255
     36a:	88 32       	cpi	r24, 0x28	; 40
     36c:	f8 f4       	brcc	.+62     	; 0x3ac <HardwareSerial::write(unsigned char)+0x88>
     36e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <tx_buffer_tail>
     372:	98 17       	cp	r25, r24
     374:	e1 f3       	breq	.-8      	; 0x36e <HardwareSerial::write(unsigned char)+0x4a>
     376:	e8 2f       	mov	r30, r24
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	e5 5b       	subi	r30, 0xB5	; 181
     37c:	fe 4f       	sbci	r31, 0xFE	; 254
     37e:	60 83       	st	Z, r22
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <transmitting>
     386:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <tx_buffer_head>
     38a:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
     394:	08 c0       	rjmp	.+16     	; 0x3a6 <HardwareSerial::write(unsigned char)+0x82>
     396:	8f b7       	in	r24, 0x3f	; 63
     398:	f8 94       	cli
     39a:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <transmitting>
     3a4:	8f bf       	out	0x3f, r24	; 63
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	08 95       	ret
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	df cf       	rjmp	.-66     	; 0x36e <HardwareSerial::write(unsigned char)+0x4a>

000003b0 <HardwareSerial::_begin(unsigned int, unsigned char)>:
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	eb 01       	movw	r28, r22
     3b8:	14 2f       	mov	r17, r20
     3ba:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
     3be:	4f 3f       	cpi	r20, 0xFF	; 255
     3c0:	29 f0       	breq	.+10     	; 0x3cc <HardwareSerial::_begin(unsigned int, unsigned char)+0x1c>
     3c2:	84 2f       	mov	r24, r20
     3c4:	43 d1       	rcall	.+646    	; 0x64c <_pinMode_output>
     3c6:	e1 2f       	mov	r30, r17
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	57 d1       	rcall	.+686    	; 0x67a <_digitalWrite_LOW>
     3cc:	c0 ff       	sbrs	r28, 0
     3ce:	24 c0       	rjmp	.+72     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3d0:	c1 30       	cpi	r28, 0x01	; 1
     3d2:	80 e1       	ldi	r24, 0x10	; 16
     3d4:	d8 07       	cpc	r29, r24
     3d6:	00 f5       	brcc	.+64     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
     3de:	21 97       	sbiw	r28, 0x01	; 1
     3e0:	d0 93 cd 00 	sts	0x00CD, r29	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
     3e4:	c0 93 cc 00 	sts	0x00CC, r28	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
     3e8:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
     3ec:	83 fd       	sbrc	r24, 3
     3ee:	10 c0       	rjmp	.+32     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3f0:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <rx_buffer_head>
     3f4:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <rx_buffer_tail>
     3f8:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <tx_buffer_head>
     3fc:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <tx_buffer_tail>
     400:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <transmitting>
     404:	86 e0       	ldi	r24, 0x06	; 6
     406:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
     40a:	88 ed       	ldi	r24, 0xD8	; 216
     40c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	1f 91       	pop	r17
     416:	08 95       	ret
     418:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
     41c:	d6 95       	lsr	r29
     41e:	c7 95       	ror	r28
     420:	de cf       	rjmp	.-68     	; 0x3de <HardwareSerial::_begin(unsigned int, unsigned char)+0x2e>

00000422 <__vector_25>:
	return 1;
#endif
}

ISR(USART1_RX_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	2f 93       	push	r18
     42e:	8f 93       	push	r24
     430:	9f 93       	push	r25
     432:	ef 93       	push	r30
     434:	ff 93       	push	r31
	uint8_t c, i;

	c = UDR1;
     436:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
	i = rx_buffer_head + 1;
     43a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rx_buffer_head>
     43e:	8f 5f       	subi	r24, 0xFF	; 255
	if (i >= RX_BUFFER_SIZE) i = 0;
     440:	80 34       	cpi	r24, 0x40	; 64
     442:	08 f0       	brcs	.+2      	; 0x446 <__vector_25+0x24>
     444:	80 e0       	ldi	r24, 0x00	; 0
	if (i != rx_buffer_tail) {
     446:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <rx_buffer_tail>
     44a:	28 17       	cp	r18, r24
     44c:	39 f0       	breq	.+14     	; 0x45c <__vector_25+0x3a>
		rx_buffer[i] = c;
     44e:	e8 2f       	mov	r30, r24
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	eb 58       	subi	r30, 0x8B	; 139
     454:	fe 4f       	sbci	r31, 0xFE	; 254
     456:	90 83       	st	Z, r25
		rx_buffer_head = i;
     458:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <rx_buffer_head>
	}
}
     45c:	ff 91       	pop	r31
     45e:	ef 91       	pop	r30
     460:	9f 91       	pop	r25
     462:	8f 91       	pop	r24
     464:	2f 91       	pop	r18
     466:	0f 90       	pop	r0
     468:	0f be       	out	0x3f, r0	; 63
     46a:	0f 90       	pop	r0
     46c:	1f 90       	pop	r1
     46e:	18 95       	reti

00000470 <__vector_26>:

ISR(USART1_UDRE_vect)
{
     470:	1f 92       	push	r1
     472:	0f 92       	push	r0
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	0f 92       	push	r0
     478:	11 24       	eor	r1, r1
     47a:	8f 93       	push	r24
     47c:	9f 93       	push	r25
     47e:	ef 93       	push	r30
     480:	ff 93       	push	r31
	uint8_t i;

	if (tx_buffer_head == tx_buffer_tail) {
     482:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tx_buffer_head>
     486:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tx_buffer_tail>
     48a:	98 13       	cpse	r25, r24
     48c:	0e c0       	rjmp	.+28     	; 0x4aa <__vector_26+0x3a>
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
     48e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
     492:	8f 7d       	andi	r24, 0xDF	; 223
     494:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
		i = tx_buffer_tail + 1;
		if (i >= TX_BUFFER_SIZE) i = 0;
		UDR1 = tx_buffer[i];
		tx_buffer_tail = i;
	}
}
     498:	ff 91       	pop	r31
     49a:	ef 91       	pop	r30
     49c:	9f 91       	pop	r25
     49e:	8f 91       	pop	r24
     4a0:	0f 90       	pop	r0
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	0f 90       	pop	r0
     4a6:	1f 90       	pop	r1
     4a8:	18 95       	reti
	if (tx_buffer_head == tx_buffer_tail) {
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
	} else {
		i = tx_buffer_tail + 1;
     4aa:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tx_buffer_tail>
     4ae:	8f 5f       	subi	r24, 0xFF	; 255
		if (i >= TX_BUFFER_SIZE) i = 0;
     4b0:	88 32       	cpi	r24, 0x28	; 40
     4b2:	08 f0       	brcs	.+2      	; 0x4b6 <__vector_26+0x46>
     4b4:	80 e0       	ldi	r24, 0x00	; 0
		UDR1 = tx_buffer[i];
     4b6:	e8 2f       	mov	r30, r24
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	e5 5b       	subi	r30, 0xB5	; 181
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
     4be:	90 81       	ld	r25, Z
     4c0:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
		tx_buffer_tail = i;
     4c4:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <tx_buffer_tail>
	}
}
     4c8:	e7 cf       	rjmp	.-50     	; 0x498 <__vector_26+0x28>

000004ca <__vector_27>:

ISR(USART1_TX_vect)
{
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	0f 92       	push	r0
     4d2:	11 24       	eor	r1, r1
     4d4:	8f 93       	push	r24
     4d6:	ef 93       	push	r30
     4d8:	ff 93       	push	r31
	transmitting = 0;
     4da:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <transmitting>
	if (tx_enable_pin < 255) {
     4de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4e2:	8f 3f       	cpi	r24, 0xFF	; 255
     4e4:	21 f0       	breq	.+8      	; 0x4ee <__vector_27+0x24>
		digitalWrite(tx_enable_pin, LOW);
     4e6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
			} else {
				uint16_t tmp = (pin);
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
					#else
					"call _digitalWrite_LOW"
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
     4ec:	c6 d0       	rcall	.+396    	; 0x67a <_digitalWrite_LOW>
	}
}
     4ee:	ff 91       	pop	r31
     4f0:	ef 91       	pop	r30
     4f2:	8f 91       	pop	r24
     4f4:	0f 90       	pop	r0
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	0f 90       	pop	r0
     4fa:	1f 90       	pop	r1
     4fc:	18 95       	reti

000004fe <_GLOBAL__sub_I__ZN14HardwareSerial6_beginEjh>:
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     4fe:	e0 e4       	ldi	r30, 0x40	; 64
     500:	f1 e0       	ldi	r31, 0x01	; 1
     502:	12 82       	std	Z+2, r1	; 0x02
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
     504:	88 ee       	ldi	r24, 0xE8	; 232
     506:	93 e0       	ldi	r25, 0x03	; 3
     508:	a0 e0       	ldi	r26, 0x00	; 0
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	83 83       	std	Z+3, r24	; 0x03
     50e:	94 83       	std	Z+4, r25	; 0x04
     510:	a5 83       	std	Z+5, r26	; 0x05
     512:	b6 83       	std	Z+6, r27	; 0x06
     514:	17 82       	std	Z+7, r1	; 0x07
#define HardwareSerial_h

#include <inttypes.h>
#include "Stream.h"

class HardwareSerial : public Stream
     516:	8f e1       	ldi	r24, 0x1F	; 31
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	91 83       	std	Z+1, r25	; 0x01
     51c:	80 83       	st	Z, r24

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial1;
     51e:	08 95       	ret

00000520 <Print::write(unsigned char const*, unsigned int)>:
		p += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	6c 01       	movw	r12, r24
     532:	eb 01       	movw	r28, r22
     534:	7b 01       	movw	r14, r22
     536:	e4 0e       	add	r14, r20
     538:	f5 1e       	adc	r15, r21
     53a:	10 e0       	ldi	r17, 0x00	; 0
     53c:	00 e0       	ldi	r16, 0x00	; 0
     53e:	ce 15       	cp	r28, r14
     540:	df 05       	cpc	r29, r15
     542:	61 f0       	breq	.+24     	; 0x55c <Print::write(unsigned char const*, unsigned int)+0x3c>
     544:	69 91       	ld	r22, Y+
     546:	d6 01       	movw	r26, r12
     548:	ed 91       	ld	r30, X+
     54a:	fc 91       	ld	r31, X
     54c:	01 90       	ld	r0, Z+
     54e:	f0 81       	ld	r31, Z
     550:	e0 2d       	mov	r30, r0
     552:	c6 01       	movw	r24, r12
     554:	09 95       	icall
     556:	08 0f       	add	r16, r24
     558:	19 1f       	adc	r17, r25
     55a:	f1 cf       	rjmp	.-30     	; 0x53e <Print::write(unsigned char const*, unsigned int)+0x1e>
     55c:	c8 01       	movw	r24, r16
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	08 95       	ret

00000570 <Print::println()>:
	}
	return printNumber(n, sign, 10);
}

size_t Print::println(void)
{
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	00 d0       	rcall	.+0      	; 0x576 <Print::println()+0x6>
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
	uint8_t buf[2]={'\r', '\n'};
     57a:	2d e0       	ldi	r18, 0x0D	; 13
     57c:	29 83       	std	Y+1, r18	; 0x01
     57e:	2a e0       	ldi	r18, 0x0A	; 10
     580:	2a 83       	std	Y+2, r18	; 0x02
	return write(buf, 2);
     582:	dc 01       	movw	r26, r24
     584:	ed 91       	ld	r30, X+
     586:	fc 91       	ld	r31, X
     588:	02 80       	ldd	r0, Z+2	; 0x02
     58a:	f3 81       	ldd	r31, Z+3	; 0x03
     58c:	e0 2d       	mov	r30, r0
     58e:	42 e0       	ldi	r20, 0x02	; 2
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	be 01       	movw	r22, r28
     594:	6f 5f       	subi	r22, 0xFF	; 255
     596:	7f 4f       	sbci	r23, 0xFF	; 255
     598:	09 95       	icall
}
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <main>:
#include <WProgram.h>

//int main(void) __attribute__((noreturn));
int main(void)
{
	_init_Teensyduino_internal_();
     5a4:	24 d0       	rcall	.+72     	; 0x5ee <_init_Teensyduino_internal_>

	setup();
     5a6:	2a de       	rcall	.-940    	; 0x1fc <setup>
    
	while (1) {
		loop();
     5a8:	47 de       	rcall	.-882    	; 0x238 <loop>
     5aa:	fe cf       	rjmp	.-4      	; 0x5a8 <main+0x4>

000005ac <disable_peripherals>:
     5ac:	1d ba       	out	0x1d, r1	; 29
uint8_t _shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder)
{
	if (bitOrder == LSBFIRST) {
		return shiftIn_lsbFirst(dataPin, clockPin);
	} else {
		return shiftIn_msbFirst(dataPin, clockPin);
     5ae:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
     5b2:	1c bc       	out	0x2c, r1	; 44
     5b4:	10 be       	out	0x30, r1	; 48
     5b6:	1f ba       	out	0x1f, r1	; 31
     5b8:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     5bc:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     5c0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     5c4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
     5c8:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
     5cc:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
     5d0:	ec eb       	ldi	r30, 0xBC	; 188
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	10 82       	st	Z, r1
     5d6:	14 b8       	out	0x04, r1	; 4
     5d8:	17 b8       	out	0x07, r1	; 7
     5da:	1a b8       	out	0x0a, r1	; 10
     5dc:	1d b8       	out	0x0d, r1	; 13
     5de:	10 ba       	out	0x10, r1	; 16
     5e0:	10 82       	st	Z, r1
     5e2:	15 b8       	out	0x05, r1	; 5
     5e4:	18 b8       	out	0x08, r1	; 8
     5e6:	1b b8       	out	0x0b, r1	; 11
     5e8:	1e b8       	out	0x0e, r1	; 14
     5ea:	11 ba       	out	0x11, r1	; 17
     5ec:	08 95       	ret

000005ee <_init_Teensyduino_internal_>:
     5ee:	f8 94       	cli
     5f0:	e1 e6       	ldi	r30, 0x61	; 97
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	20 e8       	ldi	r18, 0x80	; 128
     5f6:	20 83       	st	Z, r18
     5f8:	10 82       	st	Z, r1
     5fa:	83 e0       	ldi	r24, 0x03	; 3
     5fc:	84 bd       	out	0x24, r24	; 36
     5fe:	85 bd       	out	0x25, r24	; 37
     600:	ee e6       	ldi	r30, 0x6E	; 110
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	81 60       	ori	r24, 0x01	; 1
     608:	80 83       	st	Z, r24
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     616:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
     61a:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
     61e:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     622:	94 e0       	ldi	r25, 0x04	; 4
     624:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     628:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     62c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__DATA_REGION_ORIGIN__+0x63>
     630:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     634:	86 e8       	ldi	r24, 0x86	; 134
     636:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     63a:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
     63e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
     642:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__DATA_REGION_ORIGIN__+0x1d>
     646:	51 d1       	rcall	.+674    	; 0x8ea <usb_init>
     648:	78 94       	sei
     64a:	08 95       	ret

0000064c <_pinMode_output>:
     64c:	89 31       	cpi	r24, 0x19	; 25
     64e:	70 f4       	brcc	.+28     	; 0x66c <_pinMode_output+0x20>
     650:	ec ea       	ldi	r30, 0xAC	; 172
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	88 0f       	add	r24, r24
     656:	e8 0f       	add	r30, r24
     658:	f1 1d       	adc	r31, r1
     65a:	25 91       	lpm	r18, Z+
     65c:	e4 91       	lpm	r30, Z
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	9f b7       	in	r25, 0x3f	; 63
     662:	f8 94       	cli
     664:	81 81       	ldd	r24, Z+1	; 0x01
     666:	82 2b       	or	r24, r18
     668:	81 83       	std	Z+1, r24	; 0x01
     66a:	9f bf       	out	0x3f, r25	; 63
     66c:	08 95       	ret

0000066e <_digitalWrite_HIGH>:
     66e:	e9 31       	cpi	r30, 0x19	; 25
     670:	50 f4       	brcc	.+20     	; 0x686 <_digitalWrite_bailout>
     672:	ee 0f       	add	r30, r30
     674:	ec 5b       	subi	r30, 0xBC	; 188
     676:	fc 4f       	sbci	r31, 0xFC	; 252
     678:	09 94       	ijmp

0000067a <_digitalWrite_LOW>:
     67a:	e9 31       	cpi	r30, 0x19	; 25
     67c:	20 f4       	brcc	.+8      	; 0x686 <_digitalWrite_bailout>
     67e:	ee 0f       	add	r30, r30
     680:	ea 58       	subi	r30, 0x8A	; 138
     682:	fc 4f       	sbci	r31, 0xFC	; 252
     684:	09 94       	ijmp

00000686 <_digitalWrite_bailout>:
     686:	08 95       	ret

00000688 <_digitalWrite_HIGH_TABLE>:
     688:	28 9a       	sbi	0x05, 0	; 5
     68a:	08 95       	ret
     68c:	29 9a       	sbi	0x05, 1	; 5
     68e:	08 95       	ret
     690:	2a 9a       	sbi	0x05, 2	; 5
     692:	08 95       	ret
     694:	2b 9a       	sbi	0x05, 3	; 5
     696:	08 95       	ret
     698:	2f 9a       	sbi	0x05, 7	; 5
     69a:	6a c0       	rjmp	.+212    	; 0x770 <_digitalWrite_OC1C>
     69c:	58 9a       	sbi	0x0b, 0	; 11
     69e:	58 c0       	rjmp	.+176    	; 0x750 <_digitalWrite_OC0B>
     6a0:	59 9a       	sbi	0x0b, 1	; 11
     6a2:	08 95       	ret
     6a4:	5a 9a       	sbi	0x0b, 2	; 11
     6a6:	08 95       	ret
     6a8:	5b 9a       	sbi	0x0b, 3	; 11
     6aa:	08 95       	ret
     6ac:	46 9a       	sbi	0x08, 6	; 8
     6ae:	66 c0       	rjmp	.+204    	; 0x77c <_digitalWrite_OC3A>
     6b0:	47 9a       	sbi	0x08, 7	; 8
     6b2:	6a c0       	rjmp	.+212    	; 0x788 <_digitalWrite_OC4A>
     6b4:	5e 9a       	sbi	0x0b, 6	; 11
     6b6:	08 95       	ret
     6b8:	5f 9a       	sbi	0x0b, 7	; 11
     6ba:	6c c0       	rjmp	.+216    	; 0x794 <_digitalWrite_OC4D>
     6bc:	2c 9a       	sbi	0x05, 4	; 5
     6be:	08 95       	ret
     6c0:	2d 9a       	sbi	0x05, 5	; 5
     6c2:	4a c0       	rjmp	.+148    	; 0x758 <_digitalWrite_OC1A>
     6c4:	2e 9a       	sbi	0x05, 6	; 5
     6c6:	4e c0       	rjmp	.+156    	; 0x764 <_digitalWrite_OC1B>
     6c8:	8f 9a       	sbi	0x11, 7	; 17
     6ca:	08 95       	ret
     6cc:	8e 9a       	sbi	0x11, 6	; 17
     6ce:	08 95       	ret
     6d0:	8d 9a       	sbi	0x11, 5	; 17
     6d2:	08 95       	ret
     6d4:	8c 9a       	sbi	0x11, 4	; 17
     6d6:	08 95       	ret
     6d8:	89 9a       	sbi	0x11, 1	; 17
     6da:	08 95       	ret
     6dc:	88 9a       	sbi	0x11, 0	; 17
     6de:	08 95       	ret
     6e0:	5c 9a       	sbi	0x0b, 4	; 11
     6e2:	08 95       	ret
     6e4:	5d 9a       	sbi	0x0b, 5	; 11
     6e6:	08 95       	ret
     6e8:	76 9a       	sbi	0x0e, 6	; 14
     6ea:	08 95       	ret

000006ec <_digitalWrite_LOW_TABLE>:
     6ec:	28 98       	cbi	0x05, 0	; 5
     6ee:	08 95       	ret
     6f0:	29 98       	cbi	0x05, 1	; 5
     6f2:	08 95       	ret
     6f4:	2a 98       	cbi	0x05, 2	; 5
     6f6:	08 95       	ret
     6f8:	2b 98       	cbi	0x05, 3	; 5
     6fa:	08 95       	ret
     6fc:	2f 98       	cbi	0x05, 7	; 5
     6fe:	38 c0       	rjmp	.+112    	; 0x770 <_digitalWrite_OC1C>
     700:	58 98       	cbi	0x0b, 0	; 11
     702:	26 c0       	rjmp	.+76     	; 0x750 <_digitalWrite_OC0B>
     704:	59 98       	cbi	0x0b, 1	; 11
     706:	08 95       	ret
     708:	5a 98       	cbi	0x0b, 2	; 11
     70a:	08 95       	ret
     70c:	5b 98       	cbi	0x0b, 3	; 11
     70e:	08 95       	ret
     710:	46 98       	cbi	0x08, 6	; 8
     712:	34 c0       	rjmp	.+104    	; 0x77c <_digitalWrite_OC3A>
     714:	47 98       	cbi	0x08, 7	; 8
     716:	38 c0       	rjmp	.+112    	; 0x788 <_digitalWrite_OC4A>
     718:	5e 98       	cbi	0x0b, 6	; 11
     71a:	08 95       	ret
     71c:	5f 98       	cbi	0x0b, 7	; 11
     71e:	3a c0       	rjmp	.+116    	; 0x794 <_digitalWrite_OC4D>
     720:	2c 98       	cbi	0x05, 4	; 5
     722:	08 95       	ret
     724:	2d 98       	cbi	0x05, 5	; 5
     726:	18 c0       	rjmp	.+48     	; 0x758 <_digitalWrite_OC1A>
     728:	2e 98       	cbi	0x05, 6	; 5
     72a:	1c c0       	rjmp	.+56     	; 0x764 <_digitalWrite_OC1B>
     72c:	8f 98       	cbi	0x11, 7	; 17
     72e:	08 95       	ret
     730:	8e 98       	cbi	0x11, 6	; 17
     732:	08 95       	ret
     734:	8d 98       	cbi	0x11, 5	; 17
     736:	08 95       	ret
     738:	8c 98       	cbi	0x11, 4	; 17
     73a:	08 95       	ret
     73c:	89 98       	cbi	0x11, 1	; 17
     73e:	08 95       	ret
     740:	88 98       	cbi	0x11, 0	; 17
     742:	08 95       	ret
     744:	5c 98       	cbi	0x0b, 4	; 11
     746:	08 95       	ret
     748:	5d 98       	cbi	0x0b, 5	; 11
     74a:	08 95       	ret
     74c:	76 98       	cbi	0x0e, 6	; 14
     74e:	08 95       	ret

00000750 <_digitalWrite_OC0B>:
     750:	e4 b5       	in	r30, 0x24	; 36
     752:	ef 7d       	andi	r30, 0xDF	; 223
     754:	e4 bd       	out	0x24, r30	; 36
     756:	08 95       	ret

00000758 <_digitalWrite_OC1A>:
     758:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     75c:	ef 77       	andi	r30, 0x7F	; 127
     75e:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     762:	08 95       	ret

00000764 <_digitalWrite_OC1B>:
     764:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     768:	ef 7d       	andi	r30, 0xDF	; 223
     76a:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     76e:	08 95       	ret

00000770 <_digitalWrite_OC1C>:
     770:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     774:	e7 7f       	andi	r30, 0xF7	; 247
     776:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     77a:	08 95       	ret

0000077c <_digitalWrite_OC3A>:
     77c:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
     780:	ef 77       	andi	r30, 0x7F	; 127
     782:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
     786:	08 95       	ret

00000788 <_digitalWrite_OC4A>:
     788:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     78c:	ef 77       	andi	r30, 0x7F	; 127
     78e:	e0 93 c0 00 	sts	0x00C0, r30	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     792:	08 95       	ret

00000794 <_digitalWrite_OC4D>:
     794:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     798:	e7 7f       	andi	r30, 0xF7	; 247
     79a:	e0 93 c2 00 	sts	0x00C2, r30	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     79e:	08 95       	ret

000007a0 <_reboot_Teensyduino_>:
#define WDFR 3
#endif

void _reboot_Teensyduino_(void)
{
	cli();
     7a0:	f8 94       	cli
	// stop watchdog timer, if running
	MCUSR &= ~(1<<WDFR);
     7a2:	84 b7       	in	r24, 0x34	; 52
     7a4:	87 7f       	andi	r24, 0xF7	; 247
     7a6:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE);
     7a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7ac:	80 61       	ori	r24, 0x10	; 16
     7ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	WDTCSR = 0;
     7b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
					"brne	L_%=_loop"	"\n\t"	// 2 (1 on last)
					: "=d" (tmp2)
					: "0" (tmp2)
				);
			} else {
				asm volatile(
     7b6:	80 e2       	ldi	r24, 0x20	; 32
     7b8:	9e e4       	ldi	r25, 0x4E	; 78

000007ba <L_1138_loop>:
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <L_1138_loop>
	delayMicroseconds(5000);
	UDCON = 1;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
	USBCON = (1<<FRZCLK);
     7c4:	80 e2       	ldi	r24, 0x20	; 32
     7c6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
     7ca:	80 e6       	ldi	r24, 0x60	; 96
     7cc:	9a ee       	ldi	r25, 0xEA	; 234

000007ce <L_1152_loop>:
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	f1 f7       	brne	.-4      	; 0x7ce <L_1152_loop>
	delayMicroseconds(15000);
	disable_peripherals();
     7d2:	ec de       	rcall	.-552    	; 0x5ac <disable_peripherals>
	#if defined(__AVR_AT90USB162__)
	asm volatile("jmp 0x3E00");
	#elif defined(__AVR_ATmega32U4__)
	asm volatile("jmp 0x7E00");
     7d4:	0c 94 00 3f 	jmp	0x7e00	; 0x7e00 <__data_load_end+0x6ca6>
     7d8:	ff cf       	rjmp	.-2      	; 0x7d8 <L_1152_loop+0xa>

000007da <_restart_Teensyduino_>:
	while (1) ;
}

void _restart_Teensyduino_(void)
{
	cli();
     7da:	f8 94       	cli
	disable_peripherals();  // but leave USB intact
     7dc:	e7 de       	rcall	.-562    	; 0x5ac <disable_peripherals>
     7de:	80 e6       	ldi	r24, 0x60	; 96
     7e0:	9a ee       	ldi	r25, 0xEA	; 234

000007e2 <L_1177_loop>:
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <L_1177_loop>
	delayMicroseconds(15000);
	asm volatile("jmp 0");
     7e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     7ea:	ff cf       	rjmp	.-2      	; 0x7ea <L_1177_loop+0x8>

000007ec <__vector_23>:
volatile unsigned char timer0_fract_count = 0;

void TIMER0_OVF_vect() __attribute__((naked));
void TIMER0_OVF_vect()
{
	asm volatile(
     7ec:	8f 93       	push	r24
     7ee:	8f b7       	in	r24, 0x3f	; 63
     7f0:	8f 93       	push	r24
     7f2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <timer0_fract_count>
     7f6:	8d 5f       	subi	r24, 0xFD	; 253
     7f8:	8d 37       	cpi	r24, 0x7D	; 125
     7fa:	d0 f4       	brcc	.+52     	; 0x830 <L_1192_fract_roll>

000007fc <L_1192_fract_noroll>:
     7fc:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <timer0_fract_count>
     800:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <timer0_millis_count>
     804:	8f 5f       	subi	r24, 0xFF	; 255
     806:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <timer0_millis_count>
     80a:	d8 f0       	brcs	.+54     	; 0x842 <L_1192_ovcount>

0000080c <L_1192_millis_inc_sext>:
     80c:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <timer0_millis_count+0x1>
     810:	8f 4f       	sbci	r24, 0xFF	; 255
     812:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <timer0_millis_count+0x1>
     816:	a8 f0       	brcs	.+42     	; 0x842 <L_1192_ovcount>
     818:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <timer0_millis_count+0x2>
     81c:	8f 4f       	sbci	r24, 0xFF	; 255
     81e:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <timer0_millis_count+0x2>
     822:	78 f0       	brcs	.+30     	; 0x842 <L_1192_ovcount>
     824:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <timer0_millis_count+0x3>
     828:	8f 4f       	sbci	r24, 0xFF	; 255
     82a:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <timer0_millis_count+0x3>
     82e:	09 c0       	rjmp	.+18     	; 0x842 <L_1192_ovcount>

00000830 <L_1192_fract_roll>:
     830:	8d 57       	subi	r24, 0x7D	; 125
     832:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <timer0_fract_count>
     836:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <timer0_millis_count>
     83a:	8e 5f       	subi	r24, 0xFE	; 254
     83c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <timer0_millis_count>
     840:	28 f7       	brcc	.-54     	; 0x80c <L_1192_millis_inc_sext>

00000842 <L_1192_ovcount>:
     842:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <timer0_micros_count>
     846:	8c 5f       	subi	r24, 0xFC	; 252
     848:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <timer0_micros_count>
     84c:	58 f0       	brcs	.+22     	; 0x864 <L_1192_end>
     84e:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <timer0_micros_count+0x1>
     852:	8f 4f       	sbci	r24, 0xFF	; 255
     854:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <timer0_micros_count+0x1>
     858:	28 f0       	brcs	.+10     	; 0x864 <L_1192_end>
     85a:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <timer0_micros_count+0x2>
     85e:	8f 4f       	sbci	r24, 0xFF	; 255
     860:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <timer0_micros_count+0x2>

00000864 <L_1192_end>:
     864:	8f 91       	pop	r24
     866:	8f bf       	out	0x3f, r24	; 63
     868:	8f 91       	pop	r24
     86a:	18 95       	reti

0000086c <delay>:
	);
}


void delay(uint32_t ms)
{
     86c:	cf 92       	push	r12
     86e:	df 92       	push	r13
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	6b 01       	movw	r12, r22
     876:	7c 01       	movw	r14, r24

static inline uint32_t micros(void) __attribute__((always_inline, unused));
static inline uint32_t micros(void)
{
	register uint32_t out asm("r22");
	asm volatile("call _micros" : "=d" (out) : : "r0");
     878:	19 d0       	rcall	.+50     	; 0x8ac <_micros>
	uint16_t start = (uint16_t)micros();
     87a:	9b 01       	movw	r18, r22

	while (ms > 0) {
     87c:	c1 14       	cp	r12, r1
     87e:	d1 04       	cpc	r13, r1
     880:	e1 04       	cpc	r14, r1
     882:	f1 04       	cpc	r15, r1
     884:	29 f4       	brne	.+10     	; 0x890 <delay+0x24>
		_SLEEP_CONTROL_REG = SLEEP_MODE_IDLE;
		cli();
	} while (timer0_millis_count - start <= ms);
	sei();
#endif
}
     886:	ff 90       	pop	r15
     888:	ef 90       	pop	r14
     88a:	df 90       	pop	r13
     88c:	cf 90       	pop	r12
     88e:	08 95       	ret
     890:	0d d0       	rcall	.+26     	; 0x8ac <_micros>
void delay(uint32_t ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
     892:	62 1b       	sub	r22, r18
     894:	73 0b       	sbc	r23, r19
     896:	68 3e       	cpi	r22, 0xE8	; 232
     898:	73 40       	sbci	r23, 0x03	; 3
     89a:	80 f3       	brcs	.-32     	; 0x87c <delay+0x10>
			ms--;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	c8 1a       	sub	r12, r24
     8a0:	d1 08       	sbc	r13, r1
     8a2:	e1 08       	sbc	r14, r1
     8a4:	f1 08       	sbc	r15, r1
			start += 1000;
     8a6:	28 51       	subi	r18, 0x18	; 24
     8a8:	3c 4f       	sbci	r19, 0xFC	; 252
     8aa:	e8 cf       	rjmp	.-48     	; 0x87c <delay+0x10>

000008ac <_micros>:


uint32_t _micros(void)
{
	register uint32_t out asm("r22");
	asm volatile(
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	66 b5       	in	r22, 0x26	; 38
     8b2:	15 b2       	in	r1, 0x15	; 21
     8b4:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <timer0_micros_count>
     8b8:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <timer0_micros_count+0x1>
     8bc:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <timer0_micros_count+0x2>
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	10 fe       	sbrs	r1, 0
     8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <L_1270_skip>
     8c6:	6f 3f       	cpi	r22, 0xFF	; 255
     8c8:	19 f0       	breq	.+6      	; 0x8d0 <L_1270_skip>
     8ca:	7c 5f       	subi	r23, 0xFC	; 252
     8cc:	8f 4f       	sbci	r24, 0xFF	; 255
     8ce:	9f 4f       	sbci	r25, 0xFF	; 255

000008d0 <L_1270_skip>:
     8d0:	11 24       	eor	r1, r1
     8d2:	00 24       	eor	r0, r0
     8d4:	66 0f       	add	r22, r22
     8d6:	00 1c       	adc	r0, r0
     8d8:	66 0f       	add	r22, r22
     8da:	00 1c       	adc	r0, r0
     8dc:	70 29       	or	r23, r0
		  "I" (_SFR_IO_ADDR(TIFR0)),
		  "I" (TOV0)
		: "r0"
	);
	return out;
}
     8de:	08 95       	ret

000008e0 <usb_wait_in_ready>:
	UDCON = 1;	// disconnect attach resistor
	USBCON = 0;	// shut off USB periperal
	PLLCSR = 0;	// shut off PLL
	usb_configuration = 0;
	usb_suspended = 1;
}
     8e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     8e4:	80 ff       	sbrs	r24, 0
     8e6:	fc cf       	rjmp	.-8      	; 0x8e0 <usb_wait_in_ready>
     8e8:	08 95       	ret

000008ea <usb_init>:
     8ea:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
     8ee:	87 ff       	sbrs	r24, 7
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <usb_init+0xc>
     8f2:	85 ff       	sbrs	r24, 5
     8f4:	1b c0       	rjmp	.+54     	; 0x92c <usb_init+0x42>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__DATA_REGION_ORIGIN__+0x77>
     8fc:	80 ea       	ldi	r24, 0xA0	; 160
     8fe:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
     902:	82 e1       	ldi	r24, 0x12	; 18
     904:	89 bd       	out	0x29, r24	; 41
     906:	09 b4       	in	r0, 0x29	; 41
     908:	00 fe       	sbrs	r0, 0
     90a:	fd cf       	rjmp	.-6      	; 0x906 <usb_init+0x1c>
     90c:	80 e9       	ldi	r24, 0x90	; 144
     90e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
     912:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
     916:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <usb_configuration>
     91a:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <usb_suspended>
     91e:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <__bss_end>
     922:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
     926:	8d e0       	ldi	r24, 0x0D	; 13
     928:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
     92c:	08 95       	ret

0000092e <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     92e:	1f 92       	push	r1
     930:	0f 92       	push	r0
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	0f 92       	push	r0
     936:	11 24       	eor	r1, r1
     938:	2f 93       	push	r18
     93a:	3f 93       	push	r19
     93c:	4f 93       	push	r20
     93e:	5f 93       	push	r21
     940:	6f 93       	push	r22
     942:	7f 93       	push	r23
     944:	8f 93       	push	r24
     946:	9f 93       	push	r25
     948:	af 93       	push	r26
     94a:	bf 93       	push	r27
     94c:	ef 93       	push	r30
     94e:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     950:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
        UDINT = 0;
     954:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
        if (intbits & (1<<EORSTI)) {
     958:	93 ff       	sbrs	r25, 3
     95a:	11 c0       	rjmp	.+34     	; 0x97e <__vector_10+0x50>
		// USB Reset
		UENUM = 0;
     95c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
		UECONX = 1;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
		UECFG0X = EP_TYPE_CONTROL;
     966:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     96a:	82 e2       	ldi	r24, 0x22	; 34
     96c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		UEIENX = (1<<RXSTPE);
     970:	88 e0       	ldi	r24, 0x08	; 8
     972:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
		usb_configuration = 0;
     976:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <usb_configuration>
		cdc_line_rtsdtr = 0;
     97a:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <__bss_end>
	}
	if (intbits & (1<<SOFI)) {
     97e:	92 ff       	sbrs	r25, 2
     980:	1d c0       	rjmp	.+58     	; 0x9bc <__vector_10+0x8e>
		// Start Of Frame
		if (usb_configuration) {
     982:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <usb_configuration>
     986:	88 23       	and	r24, r24
     988:	c9 f0       	breq	.+50     	; 0x9bc <__vector_10+0x8e>
			t = transmit_flush_timer;
     98a:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <transmit_flush_timer>
			if (t) {
     98e:	88 23       	and	r24, r24
     990:	59 f0       	breq	.+22     	; 0x9a8 <__vector_10+0x7a>
				transmit_flush_timer = --t;
     992:	81 50       	subi	r24, 0x01	; 1
     994:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <transmit_flush_timer>
				if (!t) {
     998:	81 11       	cpse	r24, r1
     99a:	06 c0       	rjmp	.+12     	; 0x9a8 <__vector_10+0x7a>
					UENUM = CDC_TX_ENDPOINT;
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
					UEINTX = 0x3A;
     9a2:	8a e3       	ldi	r24, 0x3A	; 58
     9a4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
				}
			}
			t = reboot_timer;
     9a8:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <reboot_timer>
			if (t) {
     9ac:	88 23       	and	r24, r24
     9ae:	31 f0       	breq	.+12     	; 0x9bc <__vector_10+0x8e>
				reboot_timer = --t;
     9b0:	81 50       	subi	r24, 0x01	; 1
     9b2:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <reboot_timer>
				if (!t) _reboot_Teensyduino_();
     9b6:	81 11       	cpse	r24, r1
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <__vector_10+0x8e>
     9ba:	f2 de       	rcall	.-540    	; 0x7a0 <_reboot_Teensyduino_>
			}
		}
	}
	// in active state
	if (intbits & (1<<SUSPI)) {
     9bc:	90 ff       	sbrs	r25, 0
     9be:	0c c0       	rjmp	.+24     	; 0x9d8 <__vector_10+0xaa>
		// USB Suspend (inactivity for 3ms)
		UDIEN = (1<<WAKEUPE);
     9c0:	80 e1       	ldi	r24, 0x10	; 16
     9c2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		usb_configuration = 0;
     9c6:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <usb_configuration>
		usb_suspended = 1;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <usb_suspended>
		#if (F_CPU >= 8000000L)
		// WAKEUPI does not work with USB clock freeze 
		// when CPU is running less than 8 MHz.
		// Is this a hardware bug?
		USB_FREEZE();			// shut off USB
     9d0:	80 ea       	ldi	r24, 0xA0	; 160
     9d2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
		PLLCSR = 0;			// shut off PLL
     9d6:	19 bc       	out	0x29, r1	; 41
		// to properly meet the USB spec, current must
		// reduce to less than 2.5 mA, which means using
		// powerdown mode, but that breaks the Arduino
		// user's paradigm....
	}
	if (usb_suspended && (intbits & (1<<WAKEUPI))) {
     9d8:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <usb_suspended>
     9dc:	88 23       	and	r24, r24
     9de:	79 f0       	breq	.+30     	; 0x9fe <__vector_10+0xd0>
     9e0:	94 ff       	sbrs	r25, 4
     9e2:	0d c0       	rjmp	.+26     	; 0x9fe <__vector_10+0xd0>
		// USB Resume (pretty much any activity)
		#if (F_CPU >= 8000000L)
		PLL_CONFIG();
     9e4:	82 e1       	ldi	r24, 0x12	; 18
     9e6:	89 bd       	out	0x29, r24	; 41
		while (!(PLLCSR & (1<<PLOCK))) ;
     9e8:	09 b4       	in	r0, 0x29	; 41
     9ea:	00 fe       	sbrs	r0, 0
     9ec:	fd cf       	rjmp	.-6      	; 0x9e8 <__vector_10+0xba>
		USB_CONFIG();
     9ee:	80 e9       	ldi	r24, 0x90	; 144
     9f0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
		#endif
		UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE);
     9f4:	8d e0       	ldi	r24, 0x0D	; 13
     9f6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		usb_suspended = 0;
     9fa:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <usb_suspended>
		return;
	}
}
     9fe:	ff 91       	pop	r31
     a00:	ef 91       	pop	r30
     a02:	bf 91       	pop	r27
     a04:	af 91       	pop	r26
     a06:	9f 91       	pop	r25
     a08:	8f 91       	pop	r24
     a0a:	7f 91       	pop	r23
     a0c:	6f 91       	pop	r22
     a0e:	5f 91       	pop	r21
     a10:	4f 91       	pop	r20
     a12:	3f 91       	pop	r19
     a14:	2f 91       	pop	r18
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
	uint16_t desc_val;
	uint32_t baud;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

	UENUM = 0;
     a4e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
	intbits = UEINTX;
     a52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	if (intbits & (1<<RXSTPI)) {
     a56:	83 ff       	sbrs	r24, 3
     a58:	20 c0       	rjmp	.+64     	; 0xa9a <__vector_11+0x7a>
		bmRequestType = UEDATX;
     a5a:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		bRequest = UEDATX;
     a5e:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		//wValue = UEDATX;
		//wValue |= (UEDATX << 8);
		read_word_lsbfirst(wValue, UEDATX);
     a62:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
     a66:	f0 90 f1 00 	lds	r15, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		//wIndex = UEDATX;
		//wIndex |= (UEDATX << 8);
		read_word_lsbfirst(wIndex, UEDATX);
     a6a:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
     a6e:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
     a72:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
     a76:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     a7a:	82 ef       	ldi	r24, 0xF2	; 242
     a7c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
                if (bRequest == GET_DESCRIPTOR) {
     a80:	c6 30       	cpi	r28, 0x06	; 6
     a82:	09 f0       	breq	.+2      	; 0xa86 <__vector_11+0x66>
     a84:	59 c0       	rjmp	.+178    	; 0xb38 <__stack+0x39>
			list = (const uint8_t *)descriptor_list;
     a86:	ee ed       	ldi	r30, 0xDE	; 222
     a88:	f0 e0       	ldi	r31, 0x00	; 0
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
     a8a:	85 91       	lpm	r24, Z+
     a8c:	95 91       	lpm	r25, Z+
				if (desc_val != wValue) {
     a8e:	e8 16       	cp	r14, r24
     a90:	f9 06       	cpc	r15, r25
     a92:	39 f0       	breq	.+14     	; 0xaa2 <__vector_11+0x82>
					list += sizeof(struct descriptor_list_struct)-2;
     a94:	35 96       	adiw	r30, 0x05	; 5
     a96:	c1 50       	subi	r28, 0x01	; 1
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     a98:	c1 f7       	brne	.-16     	; 0xa8a <__vector_11+0x6a>
				}
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
     a9a:	81 e2       	ldi	r24, 0x21	; 33
     a9c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
     aa0:	2b c0       	rjmp	.+86     	; 0xaf8 <__vector_11+0xd8>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
     aa2:	85 91       	lpm	r24, Z+
     aa4:	95 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
     aa6:	08 17       	cp	r16, r24
     aa8:	19 07       	cpc	r17, r25
     aaa:	11 f0       	breq	.+4      	; 0xab0 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-4;
     aac:	33 96       	adiw	r30, 0x03	; 3
					continue;
     aae:	f3 cf       	rjmp	.-26     	; 0xa96 <__vector_11+0x76>
				}
				//desc_addr = (const uint8_t *)pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_addr, list);
     ab0:	45 91       	lpm	r20, Z+
     ab2:	55 91       	lpm	r21, Z+
				desc_length = pgm_read_byte(list);
     ab4:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     ab6:	2f 3f       	cpi	r18, 0xFF	; 255
     ab8:	31 05       	cpc	r19, r1
     aba:	19 f0       	breq	.+6      	; 0xac2 <__vector_11+0xa2>
     abc:	10 f0       	brcs	.+4      	; 0xac2 <__vector_11+0xa2>
     abe:	2f ef       	ldi	r18, 0xFF	; 255
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	82 17       	cp	r24, r18
     ac4:	08 f4       	brcc	.+2      	; 0xac8 <__vector_11+0xa8>
     ac6:	28 2f       	mov	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     ac8:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			list = desc_addr;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     aca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     ace:	98 2f       	mov	r25, r24
     ad0:	95 70       	andi	r25, 0x05	; 5
     ad2:	d9 f3       	breq	.-10     	; 0xaca <__vector_11+0xaa>
				if (i & (1<<RXOUTI)) return;	// abort
     ad4:	82 fd       	sbrc	r24, 2
     ad6:	10 c0       	rjmp	.+32     	; 0xaf8 <__vector_11+0xd8>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     ad8:	82 2f       	mov	r24, r18
     ada:	21 32       	cpi	r18, 0x21	; 33
     adc:	08 f0       	brcs	.+2      	; 0xae0 <__vector_11+0xc0>
     ade:	80 e2       	ldi	r24, 0x20	; 32
				for (i = n; i; i--) {
     ae0:	98 2f       	mov	r25, r24
     ae2:	91 11       	cpse	r25, r1
     ae4:	22 c0       	rjmp	.+68     	; 0xb2a <__stack+0x2b>
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
     ae6:	92 2f       	mov	r25, r18
     ae8:	98 1b       	sub	r25, r24
     aea:	89 2f       	mov	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     aec:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     af0:	91 11       	cpse	r25, r1
     af2:	19 c0       	rjmp	.+50     	; 0xb26 <__stack+0x27>
     af4:	20 32       	cpi	r18, 0x20	; 32
     af6:	b8 f4       	brcc	.+46     	; 0xb26 <__stack+0x27>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	bf 91       	pop	r27
     b02:	af 91       	pop	r26
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	7f 91       	pop	r23
     b0a:	6f 91       	pop	r22
     b0c:	5f 91       	pop	r21
     b0e:	4f 91       	pop	r20
     b10:	3f 91       	pop	r19
     b12:	2f 91       	pop	r18
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
     b26:	28 2f       	mov	r18, r24
     b28:	d0 cf       	rjmp	.-96     	; 0xaca <__vector_11+0xaa>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
     b2a:	fa 01       	movw	r30, r20
     b2c:	45 91       	lpm	r20, Z+
     b2e:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
     b32:	af 01       	movw	r20, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     b34:	91 50       	subi	r25, 0x01	; 1
     b36:	d5 cf       	rjmp	.-86     	; 0xae2 <__vector_11+0xc2>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
     b38:	c5 30       	cpi	r28, 0x05	; 5
     b3a:	49 f4       	brne	.+18     	; 0xb4e <__stack+0x4f>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     b3c:	8e ef       	ldi	r24, 0xFE	; 254
     b3e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
     b42:	ce de       	rcall	.-612    	; 0x8e0 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
     b44:	8e 2d       	mov	r24, r14
     b46:	80 68       	ori	r24, 0x80	; 128
     b48:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
			return;
     b4c:	d5 cf       	rjmp	.-86     	; 0xaf8 <__vector_11+0xd8>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     b4e:	c9 30       	cpi	r28, 0x09	; 9
     b50:	21 f5       	brne	.+72     	; 0xb9a <__stack+0x9b>
     b52:	d1 11       	cpse	r29, r1
     b54:	a2 cf       	rjmp	.-188    	; 0xa9a <__vector_11+0x7a>
			usb_configuration = wValue;
     b56:	e0 92 cd 01 	sts	0x01CD, r14	; 0x8001cd <usb_configuration>
			cdc_line_rtsdtr = 0;
     b5a:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <__bss_end>
			transmit_flush_timer = 0;
     b5e:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     b62:	8e ef       	ldi	r24, 0xFE	; 254
     b64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     b68:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     b6a:	e1 ea       	ldi	r30, 0xA1	; 161
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
     b6e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
				//en = pgm_read_byte(cfg++);
				pgm_read_byte_postinc(en, cfg);
     b72:	95 91       	lpm	r25, Z+
				UECONX = en;
     b74:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				if (en) {
     b78:	99 23       	and	r25, r25
     b7a:	31 f0       	breq	.+12     	; 0xb88 <__stack+0x89>
					//UECFG0X = pgm_read_byte(cfg++);
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
     b7c:	95 91       	lpm	r25, Z+
     b7e:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
					pgm_read_byte_postinc(UECFG1X, cfg);
     b82:	95 91       	lpm	r25, Z+
     b84:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	85 30       	cpi	r24, 0x05	; 5
     b8c:	81 f7       	brne	.-32     	; 0xb6e <__stack+0x6f>
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
					pgm_read_byte_postinc(UECFG1X, cfg);
				}
			}
        		UERST = 0x1E;
     b8e:	8e e1       	ldi	r24, 0x1E	; 30
				UENUM = i;
				if (bRequest == SET_FEATURE) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
					UERST = (1 << i);
     b90:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
					UERST = 0;
     b94:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
     b98:	af cf       	rjmp	.-162    	; 0xaf8 <__vector_11+0xd8>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     b9a:	c8 30       	cpi	r28, 0x08	; 8
     b9c:	61 f4       	brne	.+24     	; 0xbb6 <__stack+0xb7>
     b9e:	d0 38       	cpi	r29, 0x80	; 128
     ba0:	09 f0       	breq	.+2      	; 0xba4 <__stack+0xa5>
			usb_wait_in_ready();
     ba2:	7b cf       	rjmp	.-266    	; 0xa9a <__vector_11+0x7a>
     ba4:	9d de       	rcall	.-710    	; 0x8e0 <usb_wait_in_ready>
			UEDATX = usb_configuration;
     ba6:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <usb_configuration>
     baa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     bae:	8e ef       	ldi	r24, 0xFE	; 254
     bb0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     bb4:	a1 cf       	rjmp	.-190    	; 0xaf8 <__vector_11+0xd8>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
     bb6:	c1 32       	cpi	r28, 0x21	; 33
     bb8:	79 f4       	brne	.+30     	; 0xbd8 <__stack+0xd9>
     bba:	d1 3a       	cpi	r29, 0xA1	; 161
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <__stack+0xc1>
			usb_wait_in_ready();
     bbe:	6d cf       	rjmp	.-294    	; 0xa9a <__vector_11+0x7a>
     bc0:	8f de       	rcall	.-738    	; 0x8e0 <usb_wait_in_ready>
			p = cdc_line_coding;
     bc2:	e1 e0       	ldi	r30, 0x01	; 1
     bc4:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     bc6:	80 81       	ld	r24, Z
     bc8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
     bcc:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	e8 30       	cpi	r30, 0x08	; 8
     bd2:	f8 07       	cpc	r31, r24
     bd4:	c1 f7       	brne	.-16     	; 0xbc6 <__stack+0xc7>
     bd6:	eb cf       	rjmp	.-42     	; 0xbae <__stack+0xaf>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
     bd8:	c0 32       	cpi	r28, 0x20	; 32
     bda:	09 f0       	breq	.+2      	; 0xbde <__stack+0xdf>
     bdc:	47 c0       	rjmp	.+142    	; 0xc6c <__stack+0x16d>
     bde:	d1 32       	cpi	r29, 0x21	; 33
     be0:	09 f0       	breq	.+2      	; 0xbe4 <__stack+0xe5>
     be2:	5b cf       	rjmp	.-330    	; 0xa9a <__vector_11+0x7a>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     be4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     be8:	82 ff       	sbrs	r24, 2
     bea:	fc cf       	rjmp	.-8      	; 0xbe4 <__stack+0xe5>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     bf0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
     bf4:	80 83       	st	Z, r24
     bf6:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	e8 30       	cpi	r30, 0x08	; 8
     bfc:	f9 07       	cpc	r31, r25
     bfe:	c1 f7       	brne	.-16     	; 0xbf0 <__stack+0xf1>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     c00:	8b ef       	ldi	r24, 0xFB	; 251
     c02:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     c06:	8e ef       	ldi	r24, 0xFE	; 254
     c08:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
     c0c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <cdc_line_coding>
				| ((uint32_t)cdc_line_coding[1] << 8)
     c10:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <cdc_line_coding+0x1>
				| ((uint32_t)cdc_line_coding[2] << 16)
     c14:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <cdc_line_coding+0x2>
				| ((uint32_t)cdc_line_coding[3] << 24);
     c18:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <cdc_line_coding+0x3>
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	dc 01       	movw	r26, r24
     c24:	99 27       	eor	r25, r25
     c26:	88 27       	eor	r24, r24
     c28:	94 2b       	or	r25, r20
     c2a:	83 2b       	or	r24, r19
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
     c2c:	b2 2b       	or	r27, r18
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
     c2e:	86 38       	cpi	r24, 0x86	; 134
     c30:	91 05       	cpc	r25, r1
     c32:	a1 05       	cpc	r26, r1
     c34:	b1 05       	cpc	r27, r1
     c36:	21 f4       	brne	.+8      	; 0xc40 <__stack+0x141>
     c38:	8f e0       	ldi	r24, 0x0F	; 15
     c3a:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <reboot_timer>
     c3e:	5c cf       	rjmp	.-328    	; 0xaf8 <__vector_11+0xd8>
			if (baud == 150UL) {
     c40:	86 39       	cpi	r24, 0x96	; 150
     c42:	91 05       	cpc	r25, r1
     c44:	a1 05       	cpc	r26, r1
     c46:	b1 05       	cpc	r27, r1
     c48:	09 f0       	breq	.+2      	; 0xc4c <__stack+0x14d>
     c4a:	56 cf       	rjmp	.-340    	; 0xaf8 <__vector_11+0xd8>
				UENUM = CDC_TX_ENDPOINT;
     c4c:	84 e0       	ldi	r24, 0x04	; 4
     c4e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
     c52:	9f ef       	ldi	r25, 0xFF	; 255
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
     c54:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     c58:	83 70       	andi	r24, 0x03	; 3
					UEINTX = 0xFF;
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
				}
				_restart_Teensyduino_();
     c5a:	09 f4       	brne	.+2      	; 0xc5e <__stack+0x15f>
     c5c:	be dd       	rcall	.-1156   	; 0x7da <_restart_Teensyduino_>
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
     c5e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
     c62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     c66:	82 fd       	sbrc	r24, 2
     c68:	fc cf       	rjmp	.-8      	; 0xc62 <__stack+0x163>
     c6a:	f4 cf       	rjmp	.-24     	; 0xc54 <__stack+0x155>
				}
				_restart_Teensyduino_();
			}
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE /* 0x22 */ && bmRequestType == 0x21) {
     c6c:	c2 32       	cpi	r28, 0x22	; 34
     c6e:	39 f4       	brne	.+14     	; 0xc7e <__stack+0x17f>
     c70:	d1 32       	cpi	r29, 0x21	; 33
     c72:	09 f0       	breq	.+2      	; 0xc76 <__stack+0x177>
			cdc_line_rtsdtr = wValue;
     c74:	12 cf       	rjmp	.-476    	; 0xa9a <__vector_11+0x7a>
     c76:	e0 92 cb 01 	sts	0x01CB, r14	; 0x8001cb <__bss_end>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
			usb_wait_in_ready();
     c7a:	32 de       	rcall	.-924    	; 0x8e0 <usb_wait_in_ready>
     c7c:	98 cf       	rjmp	.-208    	; 0xbae <__stack+0xaf>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
     c7e:	c3 32       	cpi	r28, 0x23	; 35
     c80:	21 f4       	brne	.+8      	; 0xc8a <__stack+0x18b>
     c82:	d1 32       	cpi	r29, 0x21	; 33
     c84:	09 f0       	breq	.+2      	; 0xc88 <__stack+0x189>
     c86:	09 cf       	rjmp	.-494    	; 0xa9a <__vector_11+0x7a>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
     c88:	f8 cf       	rjmp	.-16     	; 0xc7a <__stack+0x17b>
     c8a:	c1 11       	cpse	r28, r1
			usb_wait_in_ready();
     c8c:	11 c0       	rjmp	.+34     	; 0xcb0 <__stack+0x1b1>
     c8e:	28 de       	rcall	.-944    	; 0x8e0 <usb_wait_in_ready>
			i = 0;
			if (bmRequestType == 0x82) {
     c90:	d2 38       	cpi	r29, 0x82	; 130
     c92:	49 f4       	brne	.+18     	; 0xca6 <__stack+0x1a7>
				UENUM = wIndex;
     c94:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
				if (UECONX & (1<<STALLRQ)) i = 1;
     c98:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
     c9c:	c5 fb       	bst	r28, 5
     c9e:	cc 27       	eor	r28, r28
     ca0:	c0 f9       	bld	r28, 0
				UENUM = 0;
     ca2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			}
			UEDATX = i;
     ca6:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			UEDATX = 0;
     caa:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
     cae:	7f cf       	rjmp	.-258    	; 0xbae <__stack+0xaf>
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     cb0:	8c 2f       	mov	r24, r28
     cb2:	8d 7f       	andi	r24, 0xFD	; 253
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	09 f0       	breq	.+2      	; 0xcba <__stack+0x1bb>
     cb8:	f0 ce       	rjmp	.-544    	; 0xa9a <__vector_11+0x7a>
		  && bmRequestType == 0x02 && wValue == 0) {
     cba:	d2 30       	cpi	r29, 0x02	; 2
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <__stack+0x1c1>
     cbe:	ed ce       	rjmp	.-550    	; 0xa9a <__vector_11+0x7a>
     cc0:	ef 28       	or	r14, r15
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <__stack+0x1c7>
     cc4:	ea ce       	rjmp	.-556    	; 0xa9a <__vector_11+0x7a>
			i = wIndex & 0x7F;
     cc6:	0f 77       	andi	r16, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	80 0f       	add	r24, r16
     ccc:	86 30       	cpi	r24, 0x06	; 6
     cce:	08 f0       	brcs	.+2      	; 0xcd2 <__stack+0x1d3>
     cd0:	e4 ce       	rjmp	.-568    	; 0xa9a <__vector_11+0x7a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     cd2:	8e ef       	ldi	r24, 0xFE	; 254
     cd4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
     cd8:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
				if (bRequest == SET_FEATURE) {
     cdc:	c3 30       	cpi	r28, 0x03	; 3
     cde:	09 f4       	brne	.+2      	; 0xce2 <__stack+0x1e3>
     ce0:	dc ce       	rjmp	.-584    	; 0xa9a <__vector_11+0x7a>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
     ce2:	89 e1       	ldi	r24, 0x19	; 25
     ce4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
					UERST = (1 << i);
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	01 c0       	rjmp	.+2      	; 0xcf0 <__stack+0x1f1>
     cee:	88 0f       	add	r24, r24
     cf0:	0a 95       	dec	r16
     cf2:	ea f7       	brpl	.-6      	; 0xcee <__stack+0x1ef>
     cf4:	4d cf       	rjmp	.-358    	; 0xb90 <__stack+0x91>

00000cf6 <usb_serial_class::write(unsigned char)>:
	if (usb_configuration &&
	  (cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS))) {
		return true;
	}
	return false;
}
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	1f 92       	push	r1
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	69 83       	std	Y+1, r22	; 0x01
     d02:	dc 01       	movw	r26, r24
     d04:	ed 91       	ld	r30, X+
     d06:	fc 91       	ld	r31, X
     d08:	02 80       	ldd	r0, Z+2	; 0x02
     d0a:	f3 81       	ldd	r31, Z+3	; 0x03
     d0c:	e0 2d       	mov	r30, r0
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	be 01       	movw	r22, r28
     d14:	6f 5f       	subi	r22, 0xFF	; 255
     d16:	7f 4f       	sbci	r23, 0xFF	; 255
     d18:	09 95       	icall
     d1a:	0f 90       	pop	r0
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <usb_serial_class::available()>:
     d22:	fc 01       	movw	r30, r24
     d24:	8f b7       	in	r24, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <usb_configuration>
     d2c:	91 11       	cpse	r25, r1
     d2e:	0c c0       	rjmp	.+24     	; 0xd48 <usb_serial_class::available()+0x26>
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	8f bf       	out	0x3f, r24	; 63
     d34:	20 85       	ldd	r18, Z+8	; 0x08
     d36:	31 85       	ldd	r19, Z+9	; 0x09
     d38:	37 fd       	sbrc	r19, 7
     d3a:	03 c0       	rjmp	.+6      	; 0xd42 <usb_serial_class::available()+0x20>
     d3c:	9f 3f       	cpi	r25, 0xFF	; 255
     d3e:	09 f0       	breq	.+2      	; 0xd42 <usb_serial_class::available()+0x20>
     d40:	9f 5f       	subi	r25, 0xFF	; 255
     d42:	89 2f       	mov	r24, r25
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	08 95       	ret
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     d4e:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
     d52:	91 11       	cpse	r25, r1
     d54:	ee cf       	rjmp	.-36     	; 0xd32 <usb_serial_class::available()+0x10>
     d56:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     d5a:	22 ff       	sbrs	r18, 2
     d5c:	e9 cf       	rjmp	.-46     	; 0xd30 <usb_serial_class::available()+0xe>
     d5e:	25 fd       	sbrc	r18, 5
     d60:	e7 cf       	rjmp	.-50     	; 0xd30 <usb_serial_class::available()+0xe>
     d62:	2b e6       	ldi	r18, 0x6B	; 107
     d64:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     d68:	e4 cf       	rjmp	.-56     	; 0xd32 <usb_serial_class::available()+0x10>

00000d6a <usb_serial_class::peek()>:
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	ec 01       	movw	r28, r24
     d70:	88 85       	ldd	r24, Y+8	; 0x08
     d72:	99 85       	ldd	r25, Y+9	; 0x09
     d74:	97 ff       	sbrs	r25, 7
     d76:	09 c0       	rjmp	.+18     	; 0xd8a <usb_serial_class::peek()+0x20>
     d78:	e8 81       	ld	r30, Y
     d7a:	f9 81       	ldd	r31, Y+1	; 0x01
     d7c:	02 84       	ldd	r0, Z+10	; 0x0a
     d7e:	f3 85       	ldd	r31, Z+11	; 0x0b
     d80:	e0 2d       	mov	r30, r0
     d82:	ce 01       	movw	r24, r28
     d84:	09 95       	icall
     d86:	99 87       	std	Y+9, r25	; 0x09
     d88:	88 87       	std	Y+8, r24	; 0x08
     d8a:	88 85       	ldd	r24, Y+8	; 0x08
     d8c:	99 85       	ldd	r25, Y+9	; 0x09
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <usb_serial_class::read()>:
     d94:	fc 01       	movw	r30, r24
     d96:	20 85       	ldd	r18, Z+8	; 0x08
     d98:	31 85       	ldd	r19, Z+9	; 0x09
     d9a:	37 fd       	sbrc	r19, 7
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <usb_serial_class::read()+0x18>
     d9e:	4f ef       	ldi	r20, 0xFF	; 255
     da0:	5f ef       	ldi	r21, 0xFF	; 255
     da2:	51 87       	std	Z+9, r21	; 0x09
     da4:	40 87       	std	Z+8, r20	; 0x08
     da6:	c9 01       	movw	r24, r18
     da8:	99 27       	eor	r25, r25
     daa:	08 95       	ret
     dac:	9f b7       	in	r25, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <usb_configuration>
     db4:	81 11       	cpse	r24, r1
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <usb_serial_class::read()+0x2c>
     db8:	9f bf       	out	0x3f, r25	; 63
     dba:	8f ef       	ldi	r24, 0xFF	; 255
     dbc:	9f ef       	ldi	r25, 0xFF	; 255
     dbe:	08 95       	ret
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     dc6:	2b e6       	ldi	r18, 0x6B	; 107
     dc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     dcc:	85 fd       	sbrc	r24, 5
     dce:	05 c0       	rjmp	.+10     	; 0xdda <usb_serial_class::read()+0x46>
     dd0:	82 ff       	sbrs	r24, 2
     dd2:	f2 cf       	rjmp	.-28     	; 0xdb8 <usb_serial_class::read()+0x24>
     dd4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     dd8:	f7 cf       	rjmp	.-18     	; 0xdc8 <usb_serial_class::read()+0x34>
     dda:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
     dde:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     de2:	25 fd       	sbrc	r18, 5
     de4:	03 c0       	rjmp	.+6      	; 0xdec <usb_serial_class::read()+0x58>
     de6:	2b e6       	ldi	r18, 0x6B	; 107
     de8:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     dec:	9f bf       	out	0x3f, r25	; 63
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	08 95       	ret

00000df2 <usb_serial_class::availableForWrite()>:
     df2:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <usb_configuration>
     df6:	88 23       	and	r24, r24
     df8:	61 f0       	breq	.+24     	; 0xe12 <usb_serial_class::availableForWrite()+0x20>
     dfa:	8f b7       	in	r24, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	94 e0       	ldi	r25, 0x04	; 4
     e00:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     e04:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
     e08:	8f bf       	out	0x3f, r24	; 63
     e0a:	80 e4       	ldi	r24, 0x40	; 64
     e0c:	89 1b       	sub	r24, r25
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	08 95       	ret
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	08 95       	ret

00000e18 <usb_serial_class::write(unsigned char const*, unsigned int)>:
     e18:	bf 92       	push	r11
     e1a:	cf 92       	push	r12
     e1c:	df 92       	push	r13
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	7c 01       	movw	r14, r24
     e2c:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <usb_configuration>
     e30:	81 11       	cpse	r24, r1
     e32:	10 c0       	rjmp	.+32     	; 0xe54 <usb_serial_class::write(unsigned char const*, unsigned int)+0x3c>
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	f7 01       	movw	r30, r14
     e38:	82 83       	std	Z+2, r24	; 0x02
     e3a:	10 e0       	ldi	r17, 0x00	; 0
     e3c:	00 e0       	ldi	r16, 0x00	; 0
     e3e:	c8 01       	movw	r24, r16
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	cf 90       	pop	r12
     e50:	bf 90       	pop	r11
     e52:	08 95       	ret
     e54:	2f b7       	in	r18, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	84 e0       	ldi	r24, 0x04	; 4
     e5a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     e5e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <transmit_previous_timeout>
     e62:	88 23       	and	r24, r24
     e64:	41 f0       	breq	.+16     	; 0xe76 <usb_serial_class::write(unsigned char const*, unsigned int)+0x5e>
     e66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     e6a:	85 fd       	sbrc	r24, 5
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <usb_serial_class::write(unsigned char const*, unsigned int)+0x5a>
     e6e:	2f bf       	out	0x3f, r18	; 63
     e70:	e1 cf       	rjmp	.-62     	; 0xe34 <usb_serial_class::write(unsigned char const*, unsigned int)+0x1c>
     e72:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <transmit_previous_timeout>
     e76:	10 e0       	ldi	r17, 0x00	; 0
     e78:	00 e0       	ldi	r16, 0x00	; 0
     e7a:	84 e0       	ldi	r24, 0x04	; 4
     e7c:	d8 2e       	mov	r13, r24
     e7e:	90 e4       	ldi	r25, 0x40	; 64
     e80:	c9 2e       	mov	r12, r25
     e82:	a1 ef       	ldi	r26, 0xF1	; 241
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	3a e3       	ldi	r19, 0x3A	; 58
     e88:	b3 2e       	mov	r11, r19
     e8a:	33 e0       	ldi	r19, 0x03	; 3
     e8c:	41 15       	cp	r20, r1
     e8e:	51 05       	cpc	r21, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <usb_serial_class::write(unsigned char const*, unsigned int)+0x7c>
     e92:	c0 c0       	rjmp	.+384    	; 0x1014 <L548end+0x12>
     e94:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
     e98:	81 5f       	subi	r24, 0xF1	; 241
     e9a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
     e9e:	95 fd       	sbrc	r25, 5
     ea0:	16 c0       	rjmp	.+44     	; 0xece <usb_serial_class::write(unsigned char const*, unsigned int)+0xb6>
     ea2:	2f bf       	out	0x3f, r18	; 63
     ea4:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
     ea8:	89 13       	cpse	r24, r25
     eaa:	06 c0       	rjmp	.+12     	; 0xeb8 <usb_serial_class::write(unsigned char const*, unsigned int)+0xa0>
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <transmit_previous_timeout>
     eb2:	f7 01       	movw	r30, r14
     eb4:	82 83       	std	Z+2, r24	; 0x02
     eb6:	c3 cf       	rjmp	.-122    	; 0xe3e <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>
     eb8:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <usb_configuration>
     ebc:	91 11       	cpse	r25, r1
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <usb_serial_class::write(unsigned char const*, unsigned int)+0xac>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	f7 cf       	rjmp	.-18     	; 0xeb2 <usb_serial_class::write(unsigned char const*, unsigned int)+0x9a>
     ec4:	2f b7       	in	r18, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	d0 92 e9 00 	sts	0x00E9, r13	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     ecc:	e6 cf       	rjmp	.-52     	; 0xe9a <usb_serial_class::write(unsigned char const*, unsigned int)+0x82>
     ece:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
     ed2:	9c 2d       	mov	r25, r12
     ed4:	98 1b       	sub	r25, r24
     ed6:	94 17       	cp	r25, r20
     ed8:	15 06       	cpc	r1, r21
     eda:	11 f0       	breq	.+4      	; 0xee0 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
     edc:	08 f0       	brcs	.+2      	; 0xee0 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
     ede:	94 2f       	mov	r25, r20
     ee0:	e9 2f       	mov	r30, r25
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	4e 1b       	sub	r20, r30
     ee6:	5f 0b       	sbc	r21, r31
     ee8:	0e 0f       	add	r16, r30
     eea:	1f 1f       	adc	r17, r31
     eec:	eb 01       	movw	r28, r22

00000eee <L548begin>:
     eee:	e0 e4       	ldi	r30, 0x40	; 64
     ef0:	e9 1b       	sub	r30, r25
     ef2:	e0 34       	cpi	r30, 0x40	; 64
     ef4:	28 f4       	brcc	.+10     	; 0xf00 <L548err>
     ef6:	ee 0f       	add	r30, r30
     ef8:	ff 27       	eor	r31, r31
     efa:	ef 57       	subi	r30, 0x7F	; 127
     efc:	f8 4f       	sbci	r31, 0xF8	; 248
     efe:	09 94       	ijmp

00000f00 <L548err>:
     f00:	80 c0       	rjmp	.+256    	; 0x1002 <L548end>

00000f02 <L548table>:
     f02:	99 91       	ld	r25, Y+
     f04:	9c 93       	st	X, r25
     f06:	99 91       	ld	r25, Y+
     f08:	9c 93       	st	X, r25
     f0a:	99 91       	ld	r25, Y+
     f0c:	9c 93       	st	X, r25
     f0e:	99 91       	ld	r25, Y+
     f10:	9c 93       	st	X, r25
     f12:	99 91       	ld	r25, Y+
     f14:	9c 93       	st	X, r25
     f16:	99 91       	ld	r25, Y+
     f18:	9c 93       	st	X, r25
     f1a:	99 91       	ld	r25, Y+
     f1c:	9c 93       	st	X, r25
     f1e:	99 91       	ld	r25, Y+
     f20:	9c 93       	st	X, r25
     f22:	99 91       	ld	r25, Y+
     f24:	9c 93       	st	X, r25
     f26:	99 91       	ld	r25, Y+
     f28:	9c 93       	st	X, r25
     f2a:	99 91       	ld	r25, Y+
     f2c:	9c 93       	st	X, r25
     f2e:	99 91       	ld	r25, Y+
     f30:	9c 93       	st	X, r25
     f32:	99 91       	ld	r25, Y+
     f34:	9c 93       	st	X, r25
     f36:	99 91       	ld	r25, Y+
     f38:	9c 93       	st	X, r25
     f3a:	99 91       	ld	r25, Y+
     f3c:	9c 93       	st	X, r25
     f3e:	99 91       	ld	r25, Y+
     f40:	9c 93       	st	X, r25
     f42:	99 91       	ld	r25, Y+
     f44:	9c 93       	st	X, r25
     f46:	99 91       	ld	r25, Y+
     f48:	9c 93       	st	X, r25
     f4a:	99 91       	ld	r25, Y+
     f4c:	9c 93       	st	X, r25
     f4e:	99 91       	ld	r25, Y+
     f50:	9c 93       	st	X, r25
     f52:	99 91       	ld	r25, Y+
     f54:	9c 93       	st	X, r25
     f56:	99 91       	ld	r25, Y+
     f58:	9c 93       	st	X, r25
     f5a:	99 91       	ld	r25, Y+
     f5c:	9c 93       	st	X, r25
     f5e:	99 91       	ld	r25, Y+
     f60:	9c 93       	st	X, r25
     f62:	99 91       	ld	r25, Y+
     f64:	9c 93       	st	X, r25
     f66:	99 91       	ld	r25, Y+
     f68:	9c 93       	st	X, r25
     f6a:	99 91       	ld	r25, Y+
     f6c:	9c 93       	st	X, r25
     f6e:	99 91       	ld	r25, Y+
     f70:	9c 93       	st	X, r25
     f72:	99 91       	ld	r25, Y+
     f74:	9c 93       	st	X, r25
     f76:	99 91       	ld	r25, Y+
     f78:	9c 93       	st	X, r25
     f7a:	99 91       	ld	r25, Y+
     f7c:	9c 93       	st	X, r25
     f7e:	99 91       	ld	r25, Y+
     f80:	9c 93       	st	X, r25
     f82:	99 91       	ld	r25, Y+
     f84:	9c 93       	st	X, r25
     f86:	99 91       	ld	r25, Y+
     f88:	9c 93       	st	X, r25
     f8a:	99 91       	ld	r25, Y+
     f8c:	9c 93       	st	X, r25
     f8e:	99 91       	ld	r25, Y+
     f90:	9c 93       	st	X, r25
     f92:	99 91       	ld	r25, Y+
     f94:	9c 93       	st	X, r25
     f96:	99 91       	ld	r25, Y+
     f98:	9c 93       	st	X, r25
     f9a:	99 91       	ld	r25, Y+
     f9c:	9c 93       	st	X, r25
     f9e:	99 91       	ld	r25, Y+
     fa0:	9c 93       	st	X, r25
     fa2:	99 91       	ld	r25, Y+
     fa4:	9c 93       	st	X, r25
     fa6:	99 91       	ld	r25, Y+
     fa8:	9c 93       	st	X, r25
     faa:	99 91       	ld	r25, Y+
     fac:	9c 93       	st	X, r25
     fae:	99 91       	ld	r25, Y+
     fb0:	9c 93       	st	X, r25
     fb2:	99 91       	ld	r25, Y+
     fb4:	9c 93       	st	X, r25
     fb6:	99 91       	ld	r25, Y+
     fb8:	9c 93       	st	X, r25
     fba:	99 91       	ld	r25, Y+
     fbc:	9c 93       	st	X, r25
     fbe:	99 91       	ld	r25, Y+
     fc0:	9c 93       	st	X, r25
     fc2:	99 91       	ld	r25, Y+
     fc4:	9c 93       	st	X, r25
     fc6:	99 91       	ld	r25, Y+
     fc8:	9c 93       	st	X, r25
     fca:	99 91       	ld	r25, Y+
     fcc:	9c 93       	st	X, r25
     fce:	99 91       	ld	r25, Y+
     fd0:	9c 93       	st	X, r25
     fd2:	99 91       	ld	r25, Y+
     fd4:	9c 93       	st	X, r25
     fd6:	99 91       	ld	r25, Y+
     fd8:	9c 93       	st	X, r25
     fda:	99 91       	ld	r25, Y+
     fdc:	9c 93       	st	X, r25
     fde:	99 91       	ld	r25, Y+
     fe0:	9c 93       	st	X, r25
     fe2:	99 91       	ld	r25, Y+
     fe4:	9c 93       	st	X, r25
     fe6:	99 91       	ld	r25, Y+
     fe8:	9c 93       	st	X, r25
     fea:	99 91       	ld	r25, Y+
     fec:	9c 93       	st	X, r25
     fee:	99 91       	ld	r25, Y+
     ff0:	9c 93       	st	X, r25
     ff2:	99 91       	ld	r25, Y+
     ff4:	9c 93       	st	X, r25
     ff6:	99 91       	ld	r25, Y+
     ff8:	9c 93       	st	X, r25
     ffa:	99 91       	ld	r25, Y+
     ffc:	9c 93       	st	X, r25
     ffe:	99 91       	ld	r25, Y+
    1000:	9c 93       	st	X, r25

00001002 <L548end>:
    1002:	be 01       	movw	r22, r28
    1004:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1008:	85 ff       	sbrs	r24, 5
    100a:	b0 92 e8 00 	sts	0x00E8, r11	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    100e:	30 93 c0 01 	sts	0x01C0, r19	; 0x8001c0 <transmit_flush_timer>
    1012:	3c cf       	rjmp	.-392    	; 0xe8c <usb_serial_class::write(unsigned char const*, unsigned int)+0x74>
    1014:	2f bf       	out	0x3f, r18	; 63
    1016:	13 cf       	rjmp	.-474    	; 0xe3e <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>

00001018 <usb_serial_class::begin(long)>:
    1018:	2f ef       	ldi	r18, 0xFF	; 255
    101a:	3f ef       	ldi	r19, 0xFF	; 255
    101c:	fc 01       	movw	r30, r24
    101e:	31 87       	std	Z+9, r19	; 0x09
    1020:	20 87       	std	Z+8, r18	; 0x08
    1022:	63 dc       	rcall	.-1850   	; 0x8ea <usb_init>
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <timer0_millis_count>
    102c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <timer0_millis_count+0x1>
    1030:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <timer0_millis_count+0x2>
    1034:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <timer0_millis_count+0x3>
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	9c 01       	movw	r18, r24
    103c:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <usb_configuration>
    1040:	88 23       	and	r24, r24
    1042:	29 f0       	breq	.+10     	; 0x104e <usb_serial_class::begin(long)+0x36>
    1044:	68 ec       	ldi	r22, 0xC8	; 200
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0f cc       	rjmp	.-2018   	; 0x86c <delay>
    104e:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <usb_suspended>
    1052:	88 23       	and	r24, r24
    1054:	01 f1       	breq	.+64     	; 0x1096 <usb_serial_class::begin(long)+0x7e>
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <timer0_millis_count>
    105e:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <timer0_millis_count+0x1>
    1062:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <timer0_millis_count+0x2>
    1066:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <timer0_millis_count+0x3>
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <usb_suspended>
    1070:	88 23       	and	r24, r24
    1072:	89 f0       	breq	.+34     	; 0x1096 <usb_serial_class::begin(long)+0x7e>
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <timer0_millis_count>
    107c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <timer0_millis_count+0x1>
    1080:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <timer0_millis_count+0x2>
    1084:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <timer0_millis_count+0x3>
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	84 1b       	sub	r24, r20
    108c:	95 0b       	sbc	r25, r21
    108e:	8b 3f       	cpi	r24, 0xFB	; 251
    1090:	91 05       	cpc	r25, r1
    1092:	60 f3       	brcs	.-40     	; 0x106c <usb_serial_class::begin(long)+0x54>
    1094:	08 95       	ret
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <timer0_millis_count>
    109e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <timer0_millis_count+0x1>
    10a2:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <timer0_millis_count+0x2>
    10a6:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <timer0_millis_count+0x3>
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	82 1b       	sub	r24, r18
    10ae:	93 0b       	sbc	r25, r19
    10b0:	85 3c       	cpi	r24, 0xC5	; 197
    10b2:	99 40       	sbci	r25, 0x09	; 9
    10b4:	08 f4       	brcc	.+2      	; 0x10b8 <usb_serial_class::begin(long)+0xa0>
    10b6:	c2 cf       	rjmp	.-124    	; 0x103c <usb_serial_class::begin(long)+0x24>
    10b8:	08 95       	ret

000010ba <usb_serial_class::send_now()>:
    10ba:	8f b7       	in	r24, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <usb_configuration>
    10c2:	99 23       	and	r25, r25
    10c4:	61 f0       	breq	.+24     	; 0x10de <usb_serial_class::send_now()+0x24>
    10c6:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <transmit_flush_timer>
    10ca:	99 23       	and	r25, r25
    10cc:	41 f0       	breq	.+16     	; 0x10de <usb_serial_class::send_now()+0x24>
    10ce:	94 e0       	ldi	r25, 0x04	; 4
    10d0:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    10d4:	9a e3       	ldi	r25, 0x3A	; 58
    10d6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    10da:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <transmit_flush_timer>
    10de:	8f bf       	out	0x3f, r24	; 63
    10e0:	08 95       	ret

000010e2 <usb_serial_class::flush()>:
    10e2:	eb cf       	rjmp	.-42     	; 0x10ba <usb_serial_class::send_now()>

000010e4 <_GLOBAL__sub_I__ZN16usb_serial_class5beginEl>:



// Preinstantiate Objects //////////////////////////////////////////////////////

usb_serial_class Serial = usb_serial_class();
    10e4:	e1 ec       	ldi	r30, 0xC1	; 193
    10e6:	f1 e0       	ldi	r31, 0x01	; 1
    10e8:	11 86       	std	Z+9, r1	; 0x09
    10ea:	10 86       	std	Z+8, r1	; 0x08
    10ec:	12 82       	std	Z+2, r1	; 0x02
    10ee:	88 ee       	ldi	r24, 0xE8	; 232
    10f0:	93 e0       	ldi	r25, 0x03	; 3
    10f2:	a0 e0       	ldi	r26, 0x00	; 0
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	83 83       	std	Z+3, r24	; 0x03
    10f8:	94 83       	std	Z+4, r25	; 0x04
    10fa:	a5 83       	std	Z+5, r26	; 0x05
    10fc:	b6 83       	std	Z+6, r27	; 0x06
    10fe:	17 82       	std	Z+7, r1	; 0x07

#include <inttypes.h>

#include "Stream.h"

class usb_serial_class : public Stream
    1100:	81 e3       	ldi	r24, 0x31	; 49
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	91 83       	std	Z+1, r25	; 0x01
    1106:	80 83       	st	Z, r24
    1108:	08 95       	ret

0000110a <__tablejump2__>:
    110a:	ee 0f       	add	r30, r30
    110c:	ff 1f       	adc	r31, r31
    110e:	05 90       	lpm	r0, Z+
    1110:	f4 91       	lpm	r31, Z
    1112:	e0 2d       	mov	r30, r0
    1114:	09 94       	ijmp

00001116 <_exit>:
    1116:	f8 94       	cli

00001118 <__stop_program>:
    1118:	ff cf       	rjmp	.-2      	; 0x1118 <__stop_program>
